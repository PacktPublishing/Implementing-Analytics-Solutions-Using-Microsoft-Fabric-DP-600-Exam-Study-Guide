-- T-SQL Code for Creating a Table
-- This script creates an 'Employee' table within the specified database and schema.
-- Run this in a SQL Server Management Studio (SSMS) or any SQL query editor connected to your database.

CREATE TABLE [jaswarehouse].[dbo].[Employee]
(
    EmployeeID INT NOT NULL,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    DateOfBirth DATE,
    Position VARCHAR(255)
);
GO



-- T-SQL Code for Inserting Data into the Table
-- This script inserts sample employee records into the 'Employee' table.
-- Run this in the same SQL environment where the Employee table was created.

INSERT INTO [jaswarehouse].[dbo].[Employee]  
    (EmployeeID, FirstName, LastName, DateOfBirth, Position) 
VALUES 
    (1, 'John', 'Doe', '1985-07-10', 'Manager'),
    (2, 'Jane', 'Smith', '1990-02-15', 'Developer'),
    (3, 'Alice', 'Johnson', '1988-03-22', 'Designer'),
    (4, 'Bob', 'Brown', '1975-11-05', 'Analyst'),
    (5, 'Charlie', 'Davis', '1992-06-30', 'Tester');



-- Example Stored Procedure to Update Employee Salary
-- This stored procedure allows updating an employee's salary based on EmployeeID.
-- Run this in your SQL environment to create the stored procedure, then execute it as needed.

CREATE PROCEDURE UpdateEmployeeSalary
    @EmployeeID INT,
    @NewSalary DECIMAL(10, 2)
AS
BEGIN
    UPDATE Employees
    SET Salary = @NewSalary
    WHERE EmployeeID = @EmployeeID;

    IF @@ROWCOUNT = 0
    BEGIN
        RAISERROR('Employee not found', 16, 1);
    END
END;



-- SQL for Partitioning and Creating an Index
-- Creates a 'Sales' table partitioned by SaleDate and adds an index on SaleDate for optimized queries.
-- Run this in a SQL environment that supports table partitioning, such as SQL Server Enterprise.

CREATE TABLE Sales (
    SaleID INT,
    SaleDate DATE,
    Amount DECIMAL(10, 2)
)
PARTITION BY RANGE (SaleDate);

CREATE INDEX idx_SaleDate ON Sales(SaleDate);




-- SQL Query to Retrieve Data for a Specific Date Range
-- Retrieves Sales data within a specific date range.
-- Run this query in the SQL environment where the 'Sales' table is available.

SELECT SaleID, Amount
FROM Sales
WHERE SaleDate BETWEEN '2023-01-01' AND '2023-01-31';



-- Creating a Materialized View
-- This view calculates total sales by month, precomputing results for fast access.
-- Run this command in a SQL environment that supports materialized views, such as Azure Synapse or SQL Server.

CREATE MATERIALIZED VIEW mv_MonthlySales AS
SELECT EXTRACT(MONTH FROM SaleDate) AS Month, SUM(Amount) AS TotalSales
FROM Sales
GROUP BY EXTRACT(MONTH FROM SaleDate);



-- Updating Statistics for Query Optimization
-- Updates statistics on the 'Sales' table to improve query performance.
-- Run this command periodically in a SQL environment where the Sales table exists.

UPDATE STATISTICS Sales;



-- Granting Select Permissions to a Role
-- Grants 'SELECT' permissions on the 'Sales' table to a role called 'SalesAnalystRole'.
-- Run this command in the SQL environment with the 'Sales' table and the role already defined.

GRANT SELECT ON Sales TO SalesAnalystRole;


